"use strict"; var SharePointClient = SharePointClient || {}; !function () { SharePointClient.AddNameSpace = function (e) { var t = e.split("."), n = SharePointClient; "SharePointClient" === t[0] && (t = t.slice(1)); for (var i = 0; i < t.length; i++) { var r = t[i]; "undefined" == typeof n[r] && (n[r] = {}), n = n[r] } return n }, SharePointClient.AddNameSpace("Configurations"), SharePointClient.Configurations = { IsApp: !1, SPHostUrl: "", SPAppWebUrl: "", IsCrossDomainRequest: !1, SPUrl: null, REST: { AccessToken: null } }, SharePointClient.AddNameSpace("Constants"), SharePointClient.Constants = { CAML_CONSTANT: { VIEWXML: "<View></View>", CAML_QUERY_SCOPE: { filesOnly: "FilesOnly", recursive: "Recursive", recursiveAll: "RecursiveAll" }, CAML_QUERY_THROTTLE_MODE: { setdefault: "Default", override: "Override", strict: "Strict" } }, JSOM: { APP_WEB_TYPE: { hostWeb: "HOSTWEB", appWeb: "APPWEB" } }, REST: { API: "_api", WEB: "web", LISTS: "Lists", REQUEST_DIGEST_ENDPOINT: "contextinfo", HTTP: { GET: "GET", POST: "POST", DATA_TYPE: { JSON: "application/json;odata=verbose", XML: "application/atom+xml;odata=verbose" } } } }, SharePointClient.AddNameSpace("Logger"), SharePointClient.Logger = { LogJSOMException: function (e) { console.log("Request failed. " + e.get_message() + "\n" + e.get_stackTrace()) }, LogRESTException: function (e) { console.log("Request failed. " + e) } }, SharePointClient.AddNameSpace("Utilities"), SharePointClient.Utilities.Utility = function () { var e = SharePointClient.Configurations, t = function (e) { for (var t = document.URL.split("?")[1].split("&"), n = 0; n < t.length; n += 1) { var i = t[n].split("="); if (i[0] == e) return decodeURIComponent(i[1]) } }, n = function () { var e; return "undefined" != typeof _spPageContextInfo && (e = _spPageContextInfo.webAbsoluteUrl), e }, i = function () { return t("SPHostUrl") }, r = function () { return t("SPAppWebUrl") }, o = function () { var t; return e.IsApp ? t = i() + "/_layouts/15/" : "undefined" != typeof _spPageContextInfo && (t = _spPageContextInfo.webAbsoluteUrl + "/_layouts/15/"), t }, l = function () { var n; return e.IsApp ? n = null == e.SPUrl ? t("SPAppWebUrl") : e.SPUrl : "undefined" != typeof _spPageContextInfo && (n = _spPageContextInfo.webAbsoluteUrl), n + "/" + SharePointClient.Constants.REST.API + "/" }, u = function () { return l() + SharePointClient.Constants.REST.REQUEST_DIGEST_ENDPOINT }, s = function (e) { var t = e.indexOf("_api/") + 5, n = e.substring(0, t); n += "SP.AppContextSite(@target)/", n += e.substring(t, e.length); var r = i(); return n = e.indexOf("?") > 0 ? n + "@target='" + r + "'" : n + "?@target='" + r + "'" }, a = function (e) { return e = e.toLowerCase(), $("Scripts[src$='" + e + "']").length > 0 ? !0 : !1 }, c = function (e, t, n, i) { $.getScript(e + t[n], function () { n + 1 <= t.length - 1 ? c(e, t, n + 1, i) : i && i() }) }; return { GetQueryStringParameter: t, GetHostUrl: i, GetAppWebUrl: r, IsScriptExistsOnPage: a, GetUrlFromPageContextInfo: n, GetScript: c, JSOM: { GetBaseUrl: o }, REST: { GetApiUrl: l, GetRequestDigestUrl: u, GetCrossDomainRequestUrl: s } } }, SharePointClient.AddNameSpace("Utilities.CamlQueryUtility"), SharePointClient.Utilities.CamlQueryUtility = { ConvertToCamlSchema: function (e, t) { if ("string" == typeof t || "number" == typeof t) return "<" + e + ">" + t + "</" + e + ">"; var n, i = "<" + e, r = {}, o = {}; $.each(t, function (e, t) { SharePointClient.Utilities.CamlQueryUtility.IsAttribute(e) ? r[e] = t : 0 == e.indexOf("_") ? n = t : o[e] = t }); var l = SharePointClient.Utilities.CamlQueryUtility.Attributes(r); i += l.length > 0 ? l + ">" : ">"; var u = ""; return $.each(o, function (e, t) { u += "object" == typeof t ? SharePointClient.Utilities.CamlQueryUtility.ConvertToCamlSchema(e, t) : "<" + e + ">" + t + "</" + e + ">" }), u.length > 0 && (i += u), null != n && (i += n), i += "</" + e + ">" }, IsAttribute: function (e) { return "object" == typeof e ? !1 : 0 == e.indexOf("@") ? !0 : !1 }, Attributes: function (e) { if ("string" == typeof e || "number" == typeof jsonObject) return 0 == e.indexOf("@") ? e : ""; var t = ""; return $.each(e, function (e, n) { 0 == e.indexOf("@") && (t += " " + e.replace("@", "") + "='" + n + "'") }), t } }, SharePointClient.AddNameSpace("CamlExtension"), SharePointClient.CamlExtension = { JSOM: { CamlQuery: function () { $.extend(this, new SP.CamlQuery) } }, REST: { CamlQuery: function () { var e = {}, t = null, n = function () { return t }, i = function (t) { return e.View = {}, e.View = { "@Scope": t }, this }, r = function (t) { return e.Query = t, this }, o = function (t) { for (var n = "", i = 0; i <= t.length - 1; i++) n += "<FieldRef ", n += "Name='" + t[i] + "'", n += "></FieldRef>"; return e.ViewFields = n, this }, l = function (t) { return e.ViewFields = t, this }, u = function (t) { return e.QueryOptions = { QueryThrottleMode: t }, this }, s = function () { return e.OrderBy = { "@UseIndexForOrderBy": "TRUE", "@Override": "TRUE" }, this }, a = function () { return e.OrderBy = { "@UseIndexForOrderBy": "TRUE", FieldRef: { "@Name": "ID" } }, this }, c = function () { return e.OrderBy = { "@UseIndexForOrderBy": "TRUE", FieldRef: { "@Name": "ID", "@Ascending": "FALSE" } }, this }, S = function (t) { return e.RowLimit = { "@Paged": "TRUE", _value: t }, this }, f = function () { if (null == e.View) return this; var n, i = SharePointClient.Utilities.CamlQueryUtility, r = "", o = "", l = "", u = "", s = "", a = "", c = e.View; n = i.Attributes(c), r += n.length > 0 ? "<View" + n + ">" : "<View>"; var S = e.Query; null != S && (o = i.ConvertToCamlSchema("Query", S)); var f = e.ViewFields; null != f && (l = i.ConvertToCamlSchema("ViewFields", f)); var C = e.QueryOptions; null != C && (u = i.ConvertToCamlSchema("QueryOptions", C)); var h = e.OrderBy; if (null != h) if (s = i.ConvertToCamlSchema("OrderBy", h), 0 == o.length) o += "<Query>", o += s, o += "</Query>"; else { var y = o.indexOf("</Query>"), d = o.substring(0, y), P = o.substring(y, o.length); o = d + s + P } var T = e.RowLimit; return null != T && (a = i.ConvertToCamlSchema("RowLimit", T)), r += o + l + u + a + "</View>", t = r, this }; return { SetViewScopeAttribute: i, SetQuery: r, SetViewFields: o, SetViewFieldsXml: l, OverrideQueryThrottleMode: u, OverrideOrderByIndex: s, OverrideOrderBy: a, OverrideOrderByDesc: c, SetRowLimit: S, BuildQuery: f, GetQueryViewXml: n } } } }, SharePointClient.CamlExtension.JSOM.CamlQuery.prototype = { queryStatement: {}, createAllItemsQuery: function () { return SP.CamlQuery.createAllItemsQuery() }, createAllFoldersQuery: function () { return SP.CamlQuery.createAllFoldersQuery() }, ViewAttribute: function (e) { return this.queryStatement.View = {}, this.queryStatement.View = { "@Scope": e }, this }, Query: function (e) { return this.queryStatement.Query = e, this }, ViewFields: function (e) { for (var t = "", n = 0; n <= e.length - 1; n++) t += "<FieldRef ", t += "Name='" + e[n] + "'", t += "></FieldRef>"; return this.queryStatement.ViewFields = t, this }, ViewFieldsXml: function (e) { return this.queryStatement.ViewFields = e, this }, QueryThrottleMode: function (e) { return this.queryStatement.QueryOptions = { QueryThrottleMode: e }, this }, OrderByIndex: function () { return this.queryStatement.OrderBy = { "@UseIndexForOrderBy": "TRUE", "@Override": "TRUE" }, this }, OrderBy: function () { return this.queryStatement.OrderBy = { "@UseIndexForOrderBy": "TRUE", FieldRef: { "@Name": "ID" } }, this }, OrderByDesc: function () { return this.queryStatement.OrderBy = { "@UseIndexForOrderBy": "TRUE", FieldRef: { "@Name": "ID", "@Ascending": "FALSE" } }, this }, RowLimit: function (e) { return this.queryStatement.RowLimit = e, this }, BuildQuery: function () { var e, t = SharePointClient.Utilities.CamlQueryUtility, n = "", i = "", r = "", o = "", l = "", u = "", s = this.queryStatement.View; e = t.Attributes(s), n += e.length > 0 ? "<View" + e + ">" : "<View>"; var a = this.queryStatement.Query; null != a && (i = t.ConvertToCamlSchema("Query", a)); var c = this.queryStatement.ViewFields; null != c && (r = t.ConvertToCamlSchema("ViewFields", c)); var S = this.queryStatement.QueryOptions; null != S && (o = t.ConvertToCamlSchema("QueryOptions", S)); var f = this.queryStatement.OrderBy; if (null != f) if (l = t.ConvertToCamlSchema("OrderBy", f), 0 == i.length) i += "<Query>", i += l, i += "</Query>"; else { var C = i.indexOf("</Query>"), h = i.substring(0, C), y = i.substring(C, i.length); i = h + l + y } var d = this.queryStatement.RowLimit; return null != d && (u = t.ConvertToCamlSchema("RowLimit", d)), n += i + r + o + u + "</View>", this.set_viewXml(n), this } }, SharePointClient.AddNameSpace("Services"), SharePointClient.Services = { JSOM: { Initialize: function (e) { var t = new SharePointClient.Utilities.Utility, n = SharePointClient.Configurations, i = t.JSOM.GetBaseUrl(), r = ["SP.Runtime.js", "SP.js"]; if (n.IsCrossDomainRequest) { var o = jQuery.grep(r, function (e) { return "" !== e && null != e && "SP.RequestExecutor.js" == e }); 0 == o.length && r.push("SP.RequestExecutor.js") } var l = []; return $.each(r, function (e, n) { t.IsScriptExistsOnPage(n) || l.push(n) }), 0 == l.length ? void e() : ($.ajaxSetup({ cache: !0 }), t.GetScript(i, l, 0, function () { e() }), void $.ajaxSetup({ cache: !1 })) }, Context: function () { var e = new SharePointClient.Utilities.Utility, t = null, n = null, i = function () { "undefined" != typeof SP.ClientContext && (t = SP.ClientContext.get_current(), n = t.get_web()) }, r = function (e) { "undefined" != typeof SP.ClientContext && (t = new SP.ClientContext(e), n = t.get_web()) }, o = function () { r(e.GetAppWebUrl()); var i = new SP.ProxyWebRequestExecutorFactory(e.GetAppWebUrl()); t.set_webRequestExecutorFactory(i); var o = new SP.AppContextSite(t, e.GetHostUrl()); n = o.get_web() }, l = function () { var t = SharePointClient.Configurations; t.IsApp ? (t.SPHostUrl = e.GetHostUrl(), t.SPAppWebUrl = e.GetAppWebUrl(), t.IsCrossDomainRequest ? o() : r(null == t.SPUrl ? e.GetAppWebUrl() : t.SPUrl)) : i() }; return { get_clientContext: function () { return (null == t || "undefined" == t) && l(), t }, get_web: function () { return (null == t || "undefined" == t) && l(), n } } }, ListServices: function () { var e = function (e, t) { var n = e.get_clientContext(), i = e.get_web(), r = i.get_lists(); n.load(r, "Include(Title, Id)"), n.executeQueryAsync(function () { t(r) }, function (e, t) { SharePointClient.Logger.LogJSOMException(t) }) }, t = function (e, t, n) { var i = e.get_clientContext(), r = e.get_web(), o = r.get_lists(); list = o.getByTitle(t), i.load(list), i.executeQueryAsync(function () { n(list) }, function (e, t) { SharePointClient.Logger.LogRESTException(t) }) }, n = function (e, t, n, i) { var o = new SP.ListItemCollectionPosition; o.set_pagingInfo(""), n.set_listItemCollectionPosition(o); var l = []; r(e, n, t, function (e) { return $.each(e, function (e, t) { "[object Array]" === Object.prototype.toString.call(t) && $.each(t, function (e, t) { l.push(t) }) }), null == e.get_listItemCollectionPosition() ? i(l) : void 0 }) }, i = function (e, t, n, i) { var o = new SP.ListItemCollectionPosition; o.set_pagingInfo(""), n.set_listItemCollectionPosition(o), r(e, n, t, i) }, r = function (e, t, n, i) { var o = e.get_clientContext(), l = e.get_web(), u = l.get_lists().getByTitle(n).getItems(t); o.load(u), o.executeQueryAsync(function () { i(u), u.get_listItemCollectionPosition() && (t.set_listItemCollectionPosition(u.get_listItemCollectionPosition()), r(e, t, n, i)) }, function (e, t) { SharePointClient.Logger.LogJSOMException(t) }) }; return { GetLists: e, GetListByTitle: t, GetLargeListItemsByListTitle: n, GetLargeListItemsByBatch: i } } }, REST: { RESTService: function () { $.support.cors = !0; var e = { Call: function (e, t, n, o, s) { var a = $.ajax({ url: e, type: t, contentType: o, data: i(n, s), headers: r(o) }); return a.then(l, u) } }, t = { Call: function (e, t, n, r, s, a) { var c = $.ajax({ url: e, type: t, data: i(n, a), headers: o(s, r) }); return c.then(l, u) } }, n = { Call: function (e, t, n, i) { { var r = jQuery.Deferred(), o = new SharePointClient.Utilities.Utility, l = new SP.RequestExecutor(o.GetQueryStringParameter("SPAppWebUrl")), u = o.REST.GetCrossDomainRequestUrl(e); l.executeAsync({ url: u, method: t, headers: { Accept: i, "Content-Type": SharePointClient.Constants.REST.HTTP.DATA_TYPE.JSON }, body: JSON.stringify(n), success: function (e) { r.resolve(e.body) }, error: function (e, t, n) { r.reject(n) } }) } return r.promise() } }, i = function (e, t) { return t ? JSON.stringify(e) : e }, r = function (e) { var t = { Accept: e }; return null != SharePointClient.Configurations.AccessToken && (t.Authorization = "Bearer " + SharePointClient.Configurations.AccessToken), t }, o = function (e, t) { var n = { Accept: e, "X-RequestDigest": t, "Content-Type": SharePointClient.Constants.REST.HTTP.DATA_TYPE.JSON }; return null != SharePointClient.Configurations.AccessToken && (n.Authorization = "Bearer " + SharePointClient.Configurations.AccessToken), n }, l = function (e) { return e }, u = function (e) { SharePointClient.Logger.LogRESTException("Exception : " + e.responseText) }; return { Request: e.Call, RequestWithDigest: t.Call, RequestCrossDomain: n.Call } }, ListServices: function () { var e = new SharePointClient.Utilities.Utility, t = SharePointClient.Constants.REST, n = SharePointClient.Services.REST.RESTService(), i = function (i, r) { var o = e.REST.GetApiUrl() + t.WEB + "/" + t.LISTS; n.Request(o, t.HTTP.GET, null, r, !1).then(function (e) { i(e) }, function () { }) }, r = function (i, r) { var o = e.REST.GetApiUrl() + t.WEB + "/" + t.LISTS + "/getbytitle('" + i + "')"; n.Request(o, t.HTTP.GET, null, r, !1).then(function (e) { alert(e.d.Title) }, function () { }) }, o = function (i, r, o, s) { var a = e.REST.GetApiUrl() + t.WEB + "/" + t.LISTS + "/getbytitle('" + i + "')/RenderListData", c = { viewXml: r.GetQueryViewXml() }; SharePointClient.Configurations.IsCrossDomainRequest ? $.getScript(e.GetQueryStringParameter("SPHostUrl") + "/_layouts/15/SP.RequestExecutor.js", function () { l(a, t.HTTP.POST, c, o, s) }) : n.Request(e.REST.GetRequestDigestUrl(), t.HTTP.POST, null, t.HTTP.DATA_TYPE.JSON, !1).then(function (e) { var n = e.d.GetContextWebInformation.FormDigestValue; u(a, t.HTTP.POST, c, n, o, s) }) }, l = function (e, t, i, r, o) { n.RequestCrossDomain(e, t, i, r, !0).then(function (t) { o(t); var n; if (n = $.parseJSON(r == SharePointClient.Constants.REST.HTTP.DATA_TYPE.JSON ? $.parseJSON(t).d.RenderListData : $($.parseXML(t).lastChild).text()), "undefined" != typeof n.NextHref && "" != n.NextHref) { var u = e, s = e.split("?"); u = 2 == s.length ? s[0] + n.NextHref : e + n.NextHref, l(u, SharePointClient.Constants.REST.HTTP.POST, i, r, o) } return n }) }, u = function (e, t, i, r, o, l) { n.RequestWithDigest(e, t, i, r, o, !0).then(function (t) { l(t); var n; if (n = o == SharePointClient.Constants.REST.HTTP.DATA_TYPE.JSON ? JSON.parse(t.d.RenderListData) : $.parseJSON(t.lastChild.lastChild.data), "undefined" != typeof n.NextHref && "" != n.NextHref) { var s = e, a = e.split("?"); s = 2 == a.length ? a[0] + n.NextHref : e + n.NextHref, u(s, SharePointClient.Constants.REST.HTTP.POST, i, r, o, l) } return n }) }; return { GetLists: i, GetListByTitle: r, GetListItemsByListName: o } } } } }();